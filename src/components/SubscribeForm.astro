---
import Button from '@/components/Button.astro';
import Modal from '@/components/Modal.astro';
import { getTranslations} from '@/translations/index.ts';

// Haal huidige taal op van Astro
const currentLocale = Astro.currentLocale || 'en';
const t = getTranslations(currentLocale);
---

<form id="subscribe-form" class="w-full max-w-md space-y-4" novalidate>
    <div class="flex space-x-2">
        <input
            type="email"
            name="email"
            id="email"
            autocomplete="email"
            required
            placeholder={t.subscribeForm.emailPlaceholder}
            class="flex-grow px-4 py-2 border border-gray rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green focus:border-green transition-all text-black bg-cream font-text text-base md:text-xl"
        />
        <select 
            id="language" 
            name="language"
            class="p-2 border border-gray rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green focus:border-green transition-all text-black text-base md:text-xl bg-cream"
            required
        >
            <option value="en" selected={currentLocale === 'en'}>ðŸ‡¬ðŸ‡§</option>
            <option value="nl" selected={currentLocale === 'nl'}>ðŸ‡³ðŸ‡±</option>
        </select>
    </div>
    <Button type="submit" id="submit-button" content={t.subscribeForm.submitButton} />
</form>

<Modal id="feedback-modal" />

<script define:vars={{ t: t.subscribeForm }}>
    document.addEventListener('DOMContentLoaded', () => {
      const form = document.getElementById('subscribe-form');
      if (!form) return;
  
      const submitButton = document.getElementById('submit-button');
      const emailInput = document.getElementById('email');
      const languageSelect = document.getElementById('language');
  
      const validateEmail = (email) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        submitButton.disabled = true;
        submitButton.innerHTML = t.loadingText;
  
        const email = emailInput.value.trim();
  
        if (!email || !validateEmail(email)) {
          window.ModalFunctions.showModal('feedback-modal', t.validationError, false);
          resetButton();
          return;
        }
  
        try {
          const res = await fetch(`/api/newsletter-subscribe`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email, language: languageSelect.value }),
          });
          const result = await res.json();
  
          if (result.success) {
            window.ModalFunctions.showModal('feedback-modal', t.success, true);
            form.reset();
          } else {
            const errorMessages = {
              already_subscribed: t.alreadySubscribed,
              invalid_email: t.invalidEmail,
            };
            window.ModalFunctions.showModal('feedback-modal', errorMessages[result.error] || t.errorMessage, false);
          }
        } catch {
          window.ModalFunctions.showModal('feedback-modal', t.connectionError, false);
        } finally {
          resetButton();
        }
      });
  
      function resetButton() {
        submitButton.disabled = false;
        submitButton.innerHTML = t.submitButton;
      }
    });
  </script>
  